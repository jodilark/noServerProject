{"version":3,"sources":["app.js","controllers/mainCtrl.js","directives/connectionTestDir.js","directives/nestedRecipeDir.js","directives/shoppingList.js","directives/strikeOutDir.js","services/mainSrv.js","services/recipeListService.js","services/singleRecipeService.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","templateUrl","url","controller","$scope","changeMeService","$stateParams","recipeListService","singleRecipeService","$interval","controllerTest","serviceTest","recipeListServiceTest","singleRecipeServiceTest","selectedRecipe","qtyToMake","id","theRecipe","match","join","listOfRecipes","getRecipeList","then","response","recipeCard","data","getRecipe","thisRecipe","tree","console","log","isRecipe","urltype","obj","key","synthID","rawArr","rawMat","raw","name","qty","sName","sQty","recipeBool","push","shoppingListArr","testy","startInterval","combineMats","a","ans","i","length","jsonObject","shoppingJson","startIntervalMakeJson","makeJson","arr","newKeyName","newValueQty","enabeGetRecipe","bool","getRecipeButton","directive","link","scope","element","attribure","on","css","service","$http","recipeList","crystal","ingredients","quantity","get"],"mappings":"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","file":"bundle.js","sourcesContent":["angular.module('noServer', ['ui.router', 'ui.select', 'ngSanitize'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/', \"\")\r\n        $stateProvider\r\n            .state('home', {\r\n                templateUrl: './views/home.html',\r\n                url: '/'                \r\n            })\r\n            .state('recipe', {\r\n                templateUrl: './views/selectedRecipe.html',\r\n                url: '/recipe',    \r\n            })\r\n            \r\n\r\n    })","angular.module('noServer').controller('changeMeController', function ($scope, changeMeService, $stateParams, recipeListService, singleRecipeService, $interval) {\r\n    // hookup tests\r\n    $scope.controllerTest = \"changeMe controller is working\"\r\n    $scope.serviceTest = changeMeService.serviceTest\r\n    $scope.recipeListServiceTest = recipeListService.recipeListServiceTest\r\n    $scope.singleRecipeServiceTest = singleRecipeService.singleRecipeServiceTest\r\n\r\n    // list of variables   \r\n    $scope.selectedRecipe //two way binding\r\n    $scope.qtyToMake = 1 //two way binding\r\n    $scope.id = (selectedRecipe) => {\r\n        $scope.theRecipe(selectedRecipe.match(/\\d/ig).join(''))\r\n    }\r\n\r\n\r\n\r\n    // functions\r\n    //Get a list of all recipes\r\n    $scope.listOfRecipes = function () {\r\n        recipeListService.getRecipeList().then(function (response) {\r\n            $scope.recipeCard = response.data\r\n        })\r\n    }\r\n    $scope.listOfRecipes()\r\n\r\n    // Get a single recipe by ID\r\n    $scope.theRecipe = function (id) {\r\n        singleRecipeService.getRecipe(id).then(function (response) {\r\n            $scope.thisRecipe = response.data\r\n            $scope.tree = response.data.tree\r\n            console.log($scope.thisRecipe)\r\n            // console.log($scope.tree[0])\r\n        })\r\n    }\r\n\r\n//   item.synths['1'].tree  \r\n\r\n    // show directive span if recipe has a url_type = 'recipe'\r\n    $scope.isRecipe = function (urltype, obj) {\r\n        // console.log(`the obj is ${obj}`)\r\n        for(let key in obj){\r\n            // console.log(`the key in the obj is ${key}`)\r\n            $scope.synthID = obj[key]\r\n            // console.log(`the new obj should be ${$scope.synthID} but is actually ${obj[key]}`)\r\n            break;\r\n        }        \r\n        return urltype > 0\r\n    }\r\n\r\n    //add tier1 objects to raw material array\r\n    var rawArr = []\r\n    $scope.rawMat = rawArr\r\n    $scope.raw = function (name, qty, sName, sQty, recipeBool) {\r\n        if (recipeBool) {\r\n            rawArr.push(\r\n                {\r\n                    [sName]: sQty\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            rawArr.push(\r\n                {\r\n                    [name]: qty\r\n                }\r\n            )\r\n        }\r\n\r\n        return rawArr //of raw objects and their quantities\r\n    }\r\n\r\n    // combine duplicate mats\r\n    var shoppingListArr = []\r\n    $scope.testy = shoppingListArr\r\n    $scope.startInterval = function(){\r\n        $interval(function(){\r\n            $scope.combineMats = function (rawArr) {\r\n                let a = rawArr;\r\n                let ans = {};\r\n                for (let i = 0; i < a.length; ++i) {\r\n                    for (let obj in a[i]) {\r\n                        ans[obj] = ans[obj] ? ans[obj] + a[i][obj] : a[i][obj];\r\n                    }\r\n                }\r\n                shoppingListArr.push(ans)\r\n            }\r\n            // console.log(rawArr)\r\n            $scope.combineMats(rawArr)\r\n        }, 500,1)  \r\n    }\r\n\r\n    //make the shoppinListArr into a Json blob\r\n    var jsonObject = []\r\n    $scope.shoppingJson = jsonObject\r\n    $scope.startIntervalMakeJson = function(){\r\n        $interval(function(){\r\n            $scope.makeJson = function (arr, newKeyName, newValueQty) {\r\n                let obj = arr[0]\r\n                // console.log(obj)\r\n                for (let key in obj) {\r\n                    // console.log(key)\r\n                    // console.log(obj[key])\r\n                    jsonObject.push(\r\n                        {\r\n                            [newKeyName]: key\r\n                            , [newValueQty]: obj[key]\r\n                        }\r\n                    )\r\n                }\r\n                // console.log(jsonObject)\r\n            }\r\n            // console.log(jsonObject)\r\n            $scope.makeJson(shoppingListArr, \"name\", \"qty\")\r\n        }, 1000,1)\r\n    }\r\n\r\n\r\n    //Enable get recipe button\r\n    $scope.enabeGetRecipe = function (bool) {\r\n        return $scope.getRecipeButton = bool\r\n    }\r\n\r\n//get dynamic synths id\r\n\r\n\r\n})","angular.module(\"noServer\").directive(\"tests\", function (changeMeService, recipeListService, singleRecipeService){\r\n    return {\r\n        templateUrl: \"../../views/connectionTest.html\"\r\n    }\r\n})","angular.module(\"noServer\").directive('nestedRecipe', function (recipeListService, singleRecipeService) {\r\n    return {\r\n        templateUrl: '../../views/nestedRecipe.html'\r\n    }\r\n})","angular.module(\"noServer\").directive('shoppingList', function (recipeListService, singleRecipeService) {\r\n    return {\r\n        templateUrl: '../../views/shoppingList.html'\r\n    }\r\n})","angular.module(\"noServer\").directive(\"strikeOut\", function (){\r\n    return {\r\n        link: function (scope, element, attribure){\r\n            element.on(\"click\", function (){             \r\n                 element.css('text-decoration', 'line-through')                \r\n            })\r\n        }\r\n    }\r\n})","angular.module('noServer').service('changeMeService', function ($http) {\r\n    this.serviceTest = \"changeMe service is working\"\r\n\r\n    // test data\r\n    this.recipeList = [{\r\n        name: \"soup\"\r\n        , id: 1\r\n        , crystal: \"fire\"\r\n        , ingredients: [{\r\n            name: \"onion\"\r\n            , quantity: 5\r\n        },\r\n        {\r\n            name: \"salt\"\r\n            , quantity: 2\r\n        },\r\n        {\r\n            name: \"grilled Meat\"\r\n            , quantity: 2\r\n            , isRecipe: true\r\n            , id: 3\r\n            , crystal: \"fire\"\r\n            , ingredients: [\r\n                {\r\n                    name: \"sheep meat\"\r\n                    , quantity: 1\r\n                },\r\n                {\r\n                    name: \"salt\"\r\n                    , quantity: 1\r\n                }\r\n            ]\r\n        }        \r\n    ]\r\n},\r\n    {\r\n        name: \"banana pie\",\r\n        id: 2\r\n    }\r\n    ]\r\n\r\n    \r\n\r\n})","angular.module('noServer').service('recipeListService', function ($http) {\r\n    this.recipeListServiceTest = \"recipeListService is working\"\r\n\r\nthis.getRecipeList  = () => ( $http.get('https://api.xivdb.com/recipe') )\r\n\r\n})","angular.module('noServer').service('singleRecipeService', function ($http) {\r\n    this.singleRecipeServiceTest = \"singleRecipeService is working\"\r\n\r\nthis.getRecipe = (id) => ( $http.get('https://api.xivdb.com/recipe/' + id).then(function (response) {\r\n            return response\r\n        }) )\r\n\r\n\r\n})\r\n"]}